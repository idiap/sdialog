"""
This module provides an extended turn class for audio dialogue processing.

The AudioTurn class extends the base Turn class with comprehensive audio-specific
functionality, including audio data storage, timing information, and metadata
for room acoustics simulation and audio processing workflows.
"""

# SPDX-FileCopyrightText: Copyright Â© 2025 Idiap Research Institute <contact@idiap.ch>
# SPDX-FileContributor: Yanis Labrak <yanis.labrak@univ-avignon.fr>
# SPDX-License-Identifier: MIT
import numpy as np
from typing import List
from sdialog import Turn


class AudioTurn(Turn):
    """
    Extended turn class with comprehensive audio processing capabilities.

    AudioTurn extends the base Turn class to support audio generation, storage,
    and processing. It maintains all the functionality of the base Turn while
    adding audio-specific features for individual utterance processing and
    room acoustics simulation.

    Key Features:

      - Audio data storage with lazy loading capabilities
      - Timing information for audio synchronization
      - Voice and speaker position metadata
      - Audio quality metrics (SNR, alignment)
      - Integration with room acoustics simulation
      - Support for external audio processing tools (dscaper)

    Audio Processing Attributes:
      - _audio: Raw audio data as numpy array
      - _sampling_rate: Audio sampling rate in Hz
      - audio_path: File path to stored audio data
      - audio_duration: Duration of the audio in seconds
      - audio_start_time: Start time within the dialogue timeline

    Metadata Attributes:
      - voice: Voice identifier used for TTS generation
      - position: Spatial position of the speaker
      - microphone_position: Microphone position for recording
      - snr: Signal-to-noise ratio of the audio
      - alignment: Text-to-audio alignment information
      - transcript: Transcribed text (if different from original)
      - is_stored_in_dscaper: Flag for external tool integration

    :ivar _audio: Raw audio data as numpy array (lazy-loaded).
    :vartype _audio: Optional[np.ndarray]
    :ivar _sampling_rate: Audio sampling rate in Hz.
    :vartype _sampling_rate: Optional[int]
    :ivar audio_path: File path to the stored audio data.
    :vartype audio_path: str
    :ivar audio_duration: Duration of the audio in seconds.
    :vartype audio_duration: float
    :ivar audio_start_time: Start time within the dialogue timeline in seconds.
    :vartype audio_start_time: float
    :ivar snr: Signal-to-noise ratio of the audio.
    :vartype snr: float
    :ivar alignment: Text-to-audio alignment information.
    :vartype alignment: List[dict]
    :ivar transcript: Transcribed text (may differ from original text).
    :vartype transcript: str
    :ivar voice: Voice identifier used for TTS generation.
    :vartype voice: str
    :ivar position: Spatial position of the speaker in the room.
    :vartype position: str
    :ivar microphone_position: Microphone position for recording.
    :vartype microphone_position: str
    :ivar is_stored_in_dscaper: Flag indicating integration with dscaper tool.
    :vartype is_stored_in_dscaper: bool
    """

    _audio: np.ndarray = None
    _sampling_rate: int = None
    audio_path: str = ""
    audio_duration: float = -1.0
    audio_start_time: float = -1.0
    snr: float = -1.0
    alignment: List[dict] = []
    transcript: str = ""
    voice: str = ""
    position: str = ""
    microphone_position: str = ""
    is_stored_in_dscaper: bool = False

    def get_audio(self) -> np.ndarray:
        """
        Retrieves the raw audio data for this turn.

        This method returns the audio data stored in the turn. The audio data
        is typically generated by a TTS engine and stored as a numpy array
        representing the audio waveform.

        :return: Numpy array containing the audio waveform data.
        :rtype: np.ndarray
        :raises AttributeError: If no audio data has been set for this turn.
        """
        return self._audio

    def set_audio(self, audio: np.ndarray, sampling_rate: int):
        """
        Sets the audio data and sampling rate for this turn.

        This method stores the generated audio data along with its sampling rate.
        The audio data is typically generated by a TTS engine and represents
        the waveform of the spoken utterance.

        :param audio: Numpy array containing the audio waveform data.
        :type audio: np.ndarray
        :param sampling_rate: Audio sampling rate in Hz (e.g., 24000, 44100).
        :type sampling_rate: int
        """
        self._audio = audio
        self._sampling_rate = sampling_rate

    @staticmethod
    def from_turn(
            turn: Turn,
            audio: np.ndarray = None,
            audio_path: str = "",
            audio_duration: float = -1.0,
            audio_start_time: float = -1.0,
            snr: float = -1.0,
            alignment: List[dict] = [],
            transcript: str = "",
            voice: str = "",
            position: str = "",
            microphone_position: str = "",
            is_stored_in_dscaper: bool = False):
        """
        Creates an AudioTurn object from a base Turn object with optional audio data.

        This static method converts a regular Turn object into an AudioTurn by
        copying the base turn data (text, speaker) and optionally adding
        audio-specific attributes and data.

        The conversion process:
        1. Creates a new AudioTurn with the base turn's text and speaker
        2. Optionally sets audio data and sampling rate
        3. Sets audio-specific metadata (paths, timing, quality metrics)
        4. Configures spatial and processing metadata

        :param turn: The base Turn object to convert.
        :type turn: Turn
        :param audio: Optional raw audio data as numpy array.
        :type audio: Optional[np.ndarray]
        :param audio_path: Optional file path to stored audio data.
        :type audio_path: str
        :param audio_duration: Duration of the audio in seconds (default: -1.0).
        :type audio_duration: float
        :param audio_start_time: Start time within dialogue timeline in seconds (default: -1.0).
        :type audio_start_time: float
        :param snr: Signal-to-noise ratio of the audio (default: -1.0).
        :type snr: float
        :param alignment: Text-to-audio alignment information (default: empty list).
        :type alignment: List[dict]
        :param transcript: Transcribed text, may differ from original (default: empty string).
        :type transcript: str
        :param voice: Voice identifier used for TTS generation (default: empty string).
        :type voice: str
        :param position: Spatial position of the speaker in the room (default: empty string).
        :type position: str
        :param microphone_position: Microphone position for recording (default: empty string).
        :type microphone_position: str
        :param is_stored_in_dscaper: Flag for dscaper tool integration (default: False).
        :type is_stored_in_dscaper: bool
        :return: A new AudioTurn object with audio-specific functionality.
        :rtype: AudioTurn
        """

        # Create AudioTurn with base turn data
        audio_turn = AudioTurn(text=turn.text, speaker=turn.speaker)

        # Set audio data and metadata
        audio_turn._audio = audio
        audio_turn.audio_path = audio_path
        audio_turn.audio_duration = audio_duration
        audio_turn.audio_start_time = audio_start_time
        audio_turn.snr = snr
        audio_turn.alignment = alignment
        audio_turn.transcript = transcript
        audio_turn.voice = voice
        audio_turn.position = position
        audio_turn.microphone_position = microphone_position
        audio_turn.is_stored_in_dscaper = is_stored_in_dscaper

        return audio_turn
